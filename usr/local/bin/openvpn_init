#!/bin/bash

# local and public ip address
localIP=$(awk 'END{print $1}' /etc/hosts)
public_ip=$(grep -m 1 -oE '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$' <<< "$(wget -T 10 -t 1 -4qO- "http://ip1.dynupdate.no-ip.com/" || curl -m 10 -4Ls "http://ip1.dynupdate.no-ip.com/")")


set -e

if [ "$DEBUG" == "1" ]; then
  set -ex
fi


# ==================================================
# ========== Certificated and Config Path ==========
# ==================================================

# create config path
mkdir -p $CONFIG/cert \
          $CONFIG/server \
          $CONFIG/client \
          $CONFIG/easy-rsa \
          /dev/net

# generete certificates
if [[ ! -e "$CONFIG/cert/done" ]]; then
  cd $CONFIG/easy-rsa
  # Create the PKI, set up the CA and the server and client certificates
  easyrsa init-pki
  easyrsa --batch build-ca nopass
  EASYRSA_CERT_EXPIRE=3650 easyrsa build-server-full server nopass
  EASYRSA_CERT_EXPIRE=3650 easyrsa build-client-full client nopass
	EASYRSA_CRL_DAYS=3650 easyrsa gen-crl
	# Move the stuff we need
	cp pki/ca.crt pki/private/ca.key pki/issued/server.crt pki/private/server.key pki/crl.pem pki/issued/client.crt pki/private/client.key $CONFIG/cert -f
	# Generate key for tls-crypt
	/usr/sbin/openvpn --genkey --secret $CONFIG/cert/tc.key
	#generate DH PARAMETER
	/usr/bin/openssl dhparam -out $CONFIG/cert/dh.pem 1024

	touch $CONFIG/cert/done
fi

# ==================================================
# =============== Network Configure ================
# ==================================================

#create tun device
if [ ! -c /dev/net/tun ]; then
  mknod /dev/net/tun c 10 200
fi

# configure iptables

iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $localIP
iptables -I INPUT -p $PROTOCOL --dport $PORT -j ACCEPT
iptables -I FORWARD -s 10.8.0.0/24 -j ACCEPT
iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables-save

echo '1' > /proc/sys/net/ipv4/ip_forward

#interface
if [ -z "$INTERFACE" ]; then
SET_INTERFACE="eth0"
else
SET_INTERFACE=$INTERFACE
fi


# ==================================================
# ================= Server Config ==================
# ==================================================

if [[ ! -e $CONFIG/server/config_template ]]; then
  echo "local $localIP
topology subnet
server 10.8.0.0 255.255.255.0
push \"redirect-gateway def1 bypass-dhcp\"
ifconfig-pool-persist ipp.txt
push \"dhcp-option DNS 1.1.1.1\"
push \"dhcp-option DNS 1.0.0.1\"
keepalive 10 120
cipher AES-256-GCM
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
script-security 2
verb 3
ca $CONFIG/cert/ca.crt
cert $CONFIG/cert/server.crt
key $CONFIG/cert/server.key
dh $CONFIG/cert/dh.pem
tls-crypt $CONFIG/cert/tc.key
crl-verify $CONFIG/cert/crl.pem
auth SHA512
" > $CONFIG/server/config_template
fi

# #Generate TCP config File
# rm -f $CONFIG/server/$PROTOCOL.conf
# {
#     echo "PROTOCOL {$PROTOCOL}"
#     cat $CONFIG/server/config_template
#   } > $CONFIG/server/$PROTOCOL.conf

#Generate Server Config File
rm -f $CONFIG/server/udp.conf
{
  echo "PROTOCOL $PROTOCOL"
  echo "explicit-exit-notify"
  cat $CONFIG/server/config_template
} > $CONFIG/server/$PROTOCOL.conf


# ==================================================
# ================= Client Config ==================
# ==================================================


if [[ ! -e "$CONFIG/client/config_template" ]]; then
  touch "$CONFIG/client/config_template"
  echo "client
dev tun

remote $public_ip $PORT $PROTOCOL
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-GCM
ignore-unknown-option block-outside-dns
block-outside-dns
verb 3" > $CONFIG/client/config_template

#Generate Connection file
rm -f $CONFIG/client/client-$PROTOCOL-$PORT.ovpn
{
  cat $CONFIG/client/config_template
	echo "<ca>"
	cat $CONFIG/cert/ca.crt
	echo "</ca>"
	echo "<cert>"
	sed -ne '/BEGIN CERTIFICATE/,$ p' $CONFIG/cert/client.crt
	echo "</cert>"
	echo "<key>"
	cat $CONFIG/cert/client.key
	echo "</key>"
	echo "<tls-crypt>"
	sed -ne '/BEGIN OpenVPN Static key/,$ p' $CONFIG/cert/tc.key
	echo "</tls-crypt>"
} > $CONFIG/client/client-$PROTOCOL-$PORT.ovpn


# ==================================================
# ================== RUN OPENVPN ===================
# ==================================================

shopt -s extglob

exec openvpn \
  --dev tun \
  --cd $CONFIG/server/ \
  --config $PROTOCOL.conf \
  --port $PORT

